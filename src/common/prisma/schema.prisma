// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Unknown
}

enum PasswordStrength {
  Normal
  Medium
  Strong
}

model User {
  id                Int           @id @default(autoincrement())
  username          String?       @db.VarChar(20)
  email             String        @unique() @db.VarChar(50)
  gender            Gender?
  password          String        @db.VarChar(255)
  passwordUpdatedAt DateTime?     @default(now()) @db.Timestamptz(6)
  passwordLockedAt  DateTime?     @db.Timestamptz(6)
  passwordHistory   Json?         @db.JsonB
  passwordAttempt   Int?          @db.SmallInt
  lastLogin         DateTime?     @db.Timestamptz(6)
  lastLoginIp       String?       @db.VarChar(20)
  status            Boolean       @default(true)
  contactId         Int           @unique
  contact           UserContact   @relation(fields: [contactId], references: [id])
  createdBy         Int?
  updatedBy         Int?
  createdAt         DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  transactions      Transaction[]

  activityLogs  UserActivityLog[]
  userCampaigns CampaignUser[]

  @@map("users")
}

model UserActivityLog {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  activityType    String   @map("activity_type") @db.VarChar(50)
  activityDetails Json?    @map("activity_details") @db.JsonB
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@index([userId, activityType])
  @@map("user_activity_logs")
}

model UserContact {
  id         Int      @id @default(autoincrement())
  firstName  String?  @db.VarChar
  middleName String?  @db.VarChar
  lastName   String?  @db.VarChar
  phone      String?  @db.VarChar(20)
  status     Boolean  @default(true)
  createdBy  Int?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  Int?

  User User?

  @@map("contacts")
}

model PasswordPolicy {
  id                    Int              @id @default(autoincrement())
  enforcePolicy         Boolean          @default(false) @db.Boolean
  strength              PasswordStrength @default(Normal)
  minPasswordLength     Int              @db.SmallInt
  passwordHistoryLength Int              @db.SmallInt
  expiryDuration        Int              @db.SmallInt
  minPasswordAge        Int              @db.SmallInt
  allowedAttempts       Int              @db.SmallInt
  lockDuration          String?
  status                Boolean          @default(true) @db.Boolean
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  createdBy             Int?
  updatedAt             DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy             Int?

  @@map("password_policy")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  amount      Decimal
  balance     Decimal
  type        TransactionType
  description String?
  status      Boolean         @default(true) @db.Boolean
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  createdBy   Int
  user        User            @relation(fields: [createdBy], references: [id])
  updatedAt   DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   Int?

  transactionCampaigns CampaignTransactions[]

  @@map("transactions")
}

enum TransactionType {
  Deposit
  Withdraw
}

model Balance {
  id     Int     @id @default(autoincrement())
  amount Decimal

  @@map("balances")
}

model Campaign {
  id                   Int                    @id @default(autoincrement())
  balance              Decimal
  shortDescription     String
  longDescription      String
  campaignType         String
  startDate            DateTime?              @db.Timestamptz(6)
  endDate              DateTime?              @db.Timestamptz(6)
  campaignUsers        CampaignUser[]
  campaignTransactions CampaignTransactions[]

  @@map("campaigns")
}

model CampaignUser {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  campaignId Int      @map("campaign_id")
  status     Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, campaignId])
  @@map("campaign_users")
}

model CampaignTransactions {
  id            Int         @id @default(autoincrement())
  campaignId    Int         @map("campaign_id")
  transactionId Int         @map("transaction_id")
  balanceAfter  Decimal     @map("balance_after")
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  campaign      Campaign    @relation(fields: [campaignId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@index([campaignId, transactionId])
  @@map("campaign_transactions")
}
